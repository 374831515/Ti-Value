// This file is generated by bts_json_to_cpp from ${json_file_name}
#include <bts/blockchain/genesis_json.hpp>
#include <bts/blockchain/genesis_state.hpp>

#include <string>
#include <fc/crypto/sha256.hpp>
#include <fc/io/raw.hpp>

namespace bts { namespace blockchain {
static const unsigned char raw_genesis_config0[] =
{
  0x80, 0x96, 0x98, 0x00, 0x00, 0x0a, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x30, 0x03, 
  0x45, 0xe3, 0x5e, 0x7a, 0x67, 0xd9, 0x95, 0xcc, 0x96, 0x08, 0x80, 0x02, 0x0a, 
  0x26, 0xf2, 0xad, 0x4e, 0x79, 0x8c, 0xcb, 0x23, 0x9b, 0x0f, 0x8f, 0x24, 0x28, 
  0x8b, 0xe4, 0xb2, 0x71, 0x08, 0xb5, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x31, 0x02, 
  0x22, 0x73, 0xf9, 0x6a, 0x71, 0xa1, 0xff, 0x84, 0x90, 0x9c, 0x77, 0x05, 0xe1, 
  0x58, 0x9c, 0x18, 0x96, 0xc4, 0xaf, 0x12, 0xc3, 0x20, 0xf1, 0x6b, 0x8d, 0x69, 
  0x44, 0xdd, 0x57, 0x4f, 0xf9, 0x8a, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x32, 0x03, 
  0xbb, 0xe4, 0xe0, 0xb3, 0x9d, 0x06, 0x28, 0x35, 0x14, 0x47, 0x44, 0x8a, 0x81, 
  0x03, 0x76, 0x2a, 0xcc, 0x5e, 0x68, 0xaf, 0xcd, 0xa1, 0xa0, 0x16, 0x77, 0xa5, 
  0xed, 0xbd, 0x96, 0x90, 0xb5, 0x8f, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x33, 0x02, 
  0x58, 0x7a, 0xbc, 0xa7, 0x37, 0x16, 0x8d, 0x5c, 0x0d, 0x0f, 0xdf, 0x93, 0xae, 
  0xdc, 0x3a, 0xd3, 0x01, 0xd1, 0x18, 0x5c, 0x4d, 0x12, 0xf7, 0x4d, 0x95, 0x5e, 
  0x23, 0x82, 0xe3, 0x84, 0x65, 0x43, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x34, 0x03, 
  0x74, 0xa0, 0xe7, 0xbd, 0xbb, 0x6e, 0x9b, 0x98, 0x46, 0xc6, 0xdf, 0x9a, 0xad, 
  0xc1, 0x37, 0x0c, 0x2a, 0x34, 0x72, 0xe0, 0x88, 0x83, 0x1f, 0xcc, 0xc0, 0xdc, 
  0x99, 0x51, 0xc3, 0xa9, 0xf9, 0xf3, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x35, 0x02, 
  0xda, 0x8e, 0x1b, 0x24, 0xc6, 0xe8, 0x4d, 0x2a, 0xa4, 0x03, 0xca, 0xd1, 0x1e, 
  0x39, 0x4a, 0x14, 0xa1, 0xa0, 0xe9, 0x45, 0x18, 0x2b, 0xc7, 0x0a, 0x04, 0x64, 
  0xb5, 0xcb, 0x67, 0xbc, 0x4c, 0xa7, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x36, 0x02, 
  0x72, 0xb4, 0x4d, 0x98, 0x1a, 0x81, 0xd3, 0x74, 0x07, 0x09, 0x3f, 0x04, 0x74, 
  0x6c, 0xa3, 0x9b, 0xe9, 0xe1, 0x54, 0xb4, 0x74, 0x0b, 0x12, 0xe0, 0xf5, 0x07, 
  0xef, 0x32, 0x7c, 0x65, 0x75, 0x6d, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x37, 0x03, 
  0xd8, 0xf1, 0x56, 0x27, 0x65, 0x63, 0x61, 0x73, 0x1e, 0x33, 0x2f, 0x87, 0xe7, 
  0xf7, 0xce, 0x81, 0x14, 0xf7, 0x41, 0x68, 0xe9, 0xec, 0x09, 0xa5, 0x06, 0x15, 
  0xc0, 0x4c, 0x25, 0x75, 0xf0, 0xa8, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x38, 0x03, 
  0xdf, 0xd4, 0xf7, 0x41, 0x4a, 0x58, 0x70, 0xcf, 0xc6, 0xa0, 0xf4, 0x9b, 0xe2, 
  0xd6, 0x67, 0x03, 0xf8, 0x24, 0xb6, 0xec, 0x0d, 0xef, 0x0d, 0x90, 0x31, 0xc0, 
  0x62, 0xad, 0x9a, 0x27, 0x8d, 0xa4, 0x05, 0x69, 0x6e, 0x69, 0x74, 0x39, 0x02, 
  0x9d, 0x35, 0x61, 0x36, 0xce, 0x80, 0xdc, 0x10, 0x8d, 0xf4, 0xca, 0x96, 0x4b, 
  0xf2, 0x06, 0x02, 0xc3, 0x85, 0x0a, 0x27, 0xbc, 0x48, 0x5c, 0x8c, 0x99, 0xf5, 
  0x77, 0x9c, 0xca, 0x1b, 0x62, 0x32, 0x0a, 0x22, 0x50, 0x64, 0x75, 0x59, 0x51, 
  0x34, 0x34, 0x55, 0x46, 0x4b, 0x79, 0x6b, 0x74, 0x5a, 0x77, 0x34, 0x4d, 0x35, 
  0x77, 0x53, 0x32, 0x52, 0x6b, 0x63, 0x46, 0x59, 0x69, 0x6a, 0x36, 0x63, 0x63, 
  0x73, 0x70, 0x73, 0x00, 0x88, 0x52, 0x6a, 0x74, 0x00, 0x00, 0x00, 0x22, 0x50, 
  0x5a, 0x71, 0x44, 0x58, 0x63, 0x4e, 0x71, 0x66, 0x71, 0x74, 0x36, 0x42, 0x73, 
  0x37, 0x72, 0x4c, 0x39, 0x73, 0x6d, 0x75, 0x53, 0x61, 0x6b, 0x39, 0x35, 0x66, 
  0x59, 0x43, 0x50, 0x61, 0x51, 0x36, 0x36, 0x00, 0x88, 0x52, 0x6a, 0x74, 0x00, 
  0x00, 0x00, 0x22, 0x50, 0x6e, 0x76, 0x75, 0x36, 0x69, 0x35, 0x41, 0x58, 0x41, 
  0x57, 0x72, 0x67, 0x6f, 0x50, 0x43, 0x52, 0x4b, 0x37, 0x72, 0x52, 0x41, 0x68, 
  0x7a, 0x71, 0x36, 0x58, 0x62, 0x57, 0x76, 0x50, 0x56, 0x31, 0x38, 0x00, 0x88, 
  0x52, 0x6a, 0x74, 0x00, 0x00, 0x00, 0x22, 0x50, 0x65, 0x48, 0x36, 0x4a, 0x71, 
  0x6a, 0x32, 0x6d, 0x72, 0x76, 0x7a, 0x35, 0x47, 0x67, 0x38, 0x44, 0x76, 0x57, 
  0x6d, 0x52, 0x67, 0x54, 0x75, 0x73, 0x77, 0x63, 0x70, 0x55, 0x31, 0x4d, 0x78, 
  0x45, 0x45, 0x00, 0x88, 0x52, 0x6a, 0x74, 0x00, 0x00, 0x00, 0x22, 0x50, 0x6b, 
  0x42, 0x41, 0x69, 0x44, 0x73, 0x58, 0x4e, 0x78, 0x47, 0x65, 0x68, 0x63, 0x51, 
  0x38, 0x45, 0x72, 0x4b, 0x58, 0x78, 0x44, 0x46, 0x53, 0x57, 0x42, 0x64, 0x31, 
  0x45, 0x72, 0x4d, 0x76, 0x69, 0x33, 0x00, 0x88, 0x52, 0x6a, 0x74, 0x00, 0x00, 
  0x00, 0x22, 0x50, 0x61, 0x70, 0x37, 0x42, 0x47, 0x77, 0x75, 0x50, 0x43, 0x50, 
  0x73, 0x53, 0x56, 0x68, 0x79, 0x55, 0x5a, 0x69, 0x4a, 0x56, 0x41, 0x6e, 0x68, 
  0x31, 0x31, 0x45, 0x74, 0x36, 0x5a, 0x45, 0x6e, 0x41, 0x46, 0x00, 0x88, 0x52, 
  0x6a, 0x74, 0x00, 0x00, 0x00, 0x22, 0x50, 0x63, 0x4d, 0x4e, 0x46, 0x56, 0x47, 
  0x72, 0x47, 0x31, 0x36, 0x4e, 0x32, 0x72, 0x77, 0x59, 0x73, 0x39, 0x4e, 0x6a, 
  0x54, 0x41, 0x51, 0x41, 0x63, 0x55, 0x4b, 0x57, 0x46, 0x32, 0x72, 0x45, 0x46, 
  0x64, 0x00, 0x88, 0x52, 0x6a, 0x74, 0x00, 0x00, 0x00, 0x22, 0x50, 0x66, 0x51, 
  0x61, 0x6d, 0x35, 0x39, 0x6e, 0x4b, 0x41, 0x32, 0x39, 0x5a, 0x46, 0x37, 0x76, 
  0x4d, 0x76, 0x59, 0x38, 0x37, 0x65, 0x6a, 0x58, 0x4a, 0x45, 0x4c, 0x48, 0x72, 
  0x67, 0x73, 0x34, 0x58, 0x61, 0x00, 0x88, 0x52, 0x6a, 0x74, 0x00, 0x00, 0x00, 
  0x22, 0x50, 0x65, 0x76, 0x45, 0x6e, 0x41, 0x32, 0x55, 0x64, 0x59, 0x43, 0x6d, 
  0x76, 0x54, 0x4c, 0x73, 0x34, 0x58, 0x65, 0x71, 0x50, 0x77, 0x78, 0x6a, 0x77, 
  0x39, 0x71, 0x6b, 0x4e, 0x33, 0x50, 0x59, 0x72, 0x61, 0x00, 0x88, 0x52, 0x6a, 
  0x74, 0x00, 0x00, 0x00, 0x22, 0x50, 0x71, 0x78, 0x48, 0x6a, 0x51, 0x54, 0x70, 
  0x4a, 0x34, 0x39, 0x33, 0x32, 0x5a, 0x6b, 0x53, 0x64, 0x52, 0x6a, 0x35, 0x77, 
  0x43, 0x48, 0x38, 0x48, 0x6b, 0x65, 0x43, 0x46, 0x41, 0x59, 0x45, 0x75, 0x57, 
  0x00, 0x88, 0x52, 0x6a, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};

genesis_state get_builtin_genesis_block_config()
{
  unsigned total_size = sizeof(raw_genesis_config0);
  std::unique_ptr<char[]> buffer(new char[total_size]);
  char *ptr = buffer.get();
  memcpy(ptr, (const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  ptr += sizeof(raw_genesis_config0);
  return fc::raw::unpack<genesis_state>(buffer.get(), total_size);
}

fc::sha256 get_builtin_genesis_block_state_hash()
{
  fc::sha256::encoder encoder;
  encoder.write((const char*)raw_genesis_config0, sizeof(raw_genesis_config0));
  return encoder.result();
}

} } // end namespace bts::blockchain
